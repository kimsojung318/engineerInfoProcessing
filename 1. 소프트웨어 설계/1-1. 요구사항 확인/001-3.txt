2022-01-04~05

#001 소프트웨어 생명 주기
1. 기본 내용
    - SW 개발 방법론의 바탕으로 개발을 위한 정의, 운영, 유지보수 등의 과정을 단계별로 나눈다
    - SW 수명 주기라고도 하며 활동 결과를 산출물로 표현한다.
    - 생명 주기 표현 형태를 SW 생명 주기 모형이라 한다.
        → 폭포수, 프로토타입, 나선형, 애자일 모형 등이 있다.

2. SW 공학
    - SE라고 하며 SW 위기 극복를 위한 방안으로 연구된 학문이다.
    - IEEE의 SW 공학 표준 용어사전 : SW 개발, 운용, 유지보수, 폐기 처분에 대한 체계적 접근 방안
    - Fairley : 지정된 비용, 기간 내 SW를 체계적 생산 및 유지보수하기 위한 기술 + 관리적 원리
    - Boehm : 과학적 지식을 SW 설계와 제작에 응용, 이를 개발, 운용, 유지보수를 위한 필요 문서 작성 과정을 의미

3. 생명 주기 모형
    1) 폭포수 모형
        - SW 개발 시 이전 단계로 돌아갈 수 없다는 전체를 가진다.
        - 철저한 검토 + 승인 과정을 거친 후 다음 단계 진행이 가능하다.
            → 개발 과정의 한 단계가 끝나야만 다음 단계 진행 가능 == 선형 순차적 모형
        - 가장 오래되고 폭넑게 사용된 전통적인 모형으로 적용 경험과 성공 사례가 많다.
        - 매뉴얼 작성이 필요하다.
        - 두 개 이상의 과정이 병행 수행되지 않는다.
        - 순서도 : 타당성 검토 → 계획 → 요구분석 → 설계 → 구현(코딩) → 시험(검사) → 유지보수 

    2) 프로토타입 모형
        - 사용자 요구사항 파악을 위에 실제 개발될 SW 견본품을 생성하여 최종 결과물을 예측한다.
            → 견본품은 사용자와 시스템 사이의 인터페이스에 중점을 두어 개발한다.
            → 추후 구현 단계에서 사용될 골격 코드가 된다.
        - 개발 완료 시점에서 오류가 발견되는 폭포수 모형의 단점을 보안한 모형
        - 순서도 : 요구수집 → 빠른 설계 → 프로토타입 구축 → 고객 평가 → 프로토타입 조정 → 구현

    3) 나선형 모형
        - 보헴(Boehm)이 제안, 폭포수 + 프로토타입 모형에 위험 분석 기능을 추가하였다.
        - SW 개발 과정을 반복하여 점진적으로 완벽한 최종 SW를 개발, 점진적 모형이라고도 한다.
            → 개발 과정 반복으로 인해 누락 혹은 추가 요구사항을 첨가할 수 있다.
            → 정밀하며 유지보수 과정이 필요없다.
        - 개발 시 발생될 수 있는 위험 요소 관리, 최소화하는 것이 목적이다.
        - 순서도 : 계획 → 위험 분석 → 개발 및 검증 → 고객 평가

    4) 애자일 모형
        - 일정 주기를 반복하며 고객의 요구사항 변화에 유연하게 대응하며 개발하는 과정을 진행한다.
        - 고객과의 소통에 초점을 맞추었다.
        - 스프린트 혹은 이터레이션 같은 짧은 개발 주기를 반복, 주기 마다 결과물에 대한 고객 평가와 요구를 적극 수용한다.
        - 개발주기는 고객 요구사항에 우선순위 부여하여 개발 작업을 진행한다.
        - 예제 모형 : 스크럼, XP, 칸반, Lean, 크리스탈, ASD, 기능 중심 개발(FDD), DSDM, DAD 등

        ＊ 애자일 선언 (필기 보류)
            a. 애자일 개발 4가지 핵심 가치

            b. 애자일 개발 12가지 실행 지침

    5) 비교 : 폭포수 VS 애자일

------------------------------------------------------------------------------------------------------------------

#002 스크럼(Scrum) 기법
1. 기본 내용
    - 팀 중심으로 개발 효율성을 높인다는 의미가 내포되어 있다.
    - 스스로 팀 구서으 개발 작업에 관한 모든 것을 스스로 해결할 수 있어야 한다.
    - 팀 구성 : 제품 책임자, 스크럼 마스터, 개발팀

2. 팀 구성 
    1) 제품 책임자 (PO : Product Owner)
        - 개발 예정 제품 이해도가 높고 요구사항을 책임지고 의사 결정할 사람이다.
            → 이해관계자 : 개발 의뢰자 혹은 사용자 담당
        - 의견 종합하여 제품 요구사항을 작성하는 주체
        - 요구사항 목록인 백로그를 작성, 이에 대한 우선순위를 지정한다.
            → 팀원들도 백로그 스토리* 작성은 가능하나 우선순위 지정은 불가능하다.
            * 스토리 : 요구사항을 서술 형태로 표현 == 사용자 스토리
        - 제품 테스트 수행하며 주기적으로 요구사항 우선순위를 갱신한다.

    2) 스크럼 마스터 (SM : Scrum Master)
        - 스크럼 수행을 위해 객관적인 시각에서 조언을 해주는 가이드 역할을 수행한다.
            → 팀원 통제가 목표는 아니다.
        - 일일 스크럼 회의 진행 시 진행 사항 점검, 개발 과정 시 발생된 장애 요소를 공론화 후 처리한다.

    3) 개발팀 (DT : Development Team)
        - PO + SM 제외 모든 팀원으로 개발자, 디자이너, 테스터 등으로 제품 개발 참여하는 모든 사람이 대상이다.

3. 스크럼 개발 프로세스
    1) 제품 백로그 (Product Backlog)
        - 모든 요구사항(Uesr Story)을 우선순위에 따라 나열한 목록
        - 개발 과정 시 신규 도출된 요구사항을 지속적으로 업데이트
        - 작성된 사용자 스토리 기반으로 전체 일정 계획 릴리즈 계획을 수립한다.

    2) 스프린트 계획 회의 (Sprint Planning Meeting)
        - 백로그 중 스프린트에서 수행할 작업 대상으로 단기 일정을 수립한다.
        - 요구사항을 태스크 단위로 분할 수 개발자별로 수행 작업 목록 스프린트 백로그를 작성한다.
    
    3) 스프린트 (Sprint)
        - 실제 개발 작업 진행 과정
        - 스프린트 백로그 태스크 대상으로 작성 시간 추정 후 개발 담당자에게 할당
            → 개발자가 직접 선별 후 담당할 수 있도록 하는 것이 좋다.
        - 태스크 : 할 일(To Do), 진행 중(In Progress), 완료(Done)

    4) 일일 스크럼 회의 ( Daily Scrum Meeting)
        - 매일 약속 시간에 모든 팀원이 15분 정도의 짧은 시간동안 진행 상황을 점검한다.
        - 서서 진행, 남은 작업 시간은 소멸 차트*에 표시한다.
            * 소멸 차트 : 스프린트 수행할 작업 진행 상황을 확인할 수 있도록 시간 경과에 따라 남은 작업 시간을 그래프로 표현, 작업 진행될 수록 점점 줄어든다. (Burn-down Chart)
        - SM은 발견된 장애 요소 해결에 도움을 준다.

    5) 스프린트 검토 회의 (Sprint Review)
        - 부분 혹은 전체 완성 제품이 요구사항에 부합되는 지 사용자 포함된 참석자 앞에서 테스팅을 수행한다.
        - 스프린트의 한 주당 한 시간 내 진행한다.
        - PO는 개선 사항 피드백 정리 후 다음 스프린트에 반영을 위해 제품 백로그를 업데이트 한다.
    
    6) 스프린트 회고 (Sprint Retrospective)
        - 스프린트 주기를 되돌아보며 규칙 준수, 개선할 점 등을 확인 후 기록한다.
        - 스트린트 종료 시점 혹은 일정 주기로 수행한다.

------------------------------------------------------------------------------------------------------------------

#003 XP(eXtreme Programming) 기법
1. 기본 내용
    - 수시로 발생하는 고객 요구사항에 유현한 대응을 위해 고객 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상한다.
    - 특징 : 짧고 반복적인 주기, 단순 설계, 고객 적극적 참여 
             → SW 빠른 개발을 목적으로 한다.
    - 릴리즈* 기간을 짧게 반복하며 고객 요구사항 반영 가시성*을 높인다.
        * 릴리즈 : 요구사항이 적용된 부분 기능 완료 제품을 제공하는 것
        * 가시성 : 대상 확인할 수 있는 정도를 의미 
             → 일부 기능 구현 시 고객에게 확인 시켜주어 요구사항 반영 정도를 직접적으로 알 수 있다.
    - 릴리즈 테스트 시 고객 직접 참여로 인해 요구 기능이 잘 작동하는 지 직접 확인 가능
    - 비교적 소규모 인원의 개발 프로그램에 효과적이다.
    - 5가지 핵심 가치 : 의사소통, 단순성, 용기, 존중, 피드백

2. XP 개발 프로세스
    1) 사용자 스토리 (Uesr Story)
        - 고객 요구사항을 간단한 시나리오로 표현
        - 기능 단위로 구성, 필요한 경우 테스트 사항도 기재
    
    2) 릴리즈 계획 수립 (Release Planning)
        - 스토리 적용된 부분 기능 완료 제품을 제공
        - 부분 혹은 전체 개발 완료 시점 일정을 수립

    3) 스파이크 (Spike)
        - 요구사항 신뢰성을 높이고 기술 문제 위험 감소를 위해 별도로 만드는 프로그램
        - 처리할 문제 제외 다른 조건은 모두 무시 후 작성

    4) 이터레이션 (Iteration)
        - 릴리즈 세분화한 단위
        - 일반적으로 1~3주 정도의 기간으로 진행
        - 기간 중 신규 스토리 작성 가능, 작성된 스토리는 진행 중인 이터레이션 혹은 다음 이터레이션에 포함 가능

    5) 승인 검사 (Acceptance Test, 인수 테스트)
        - 개별 이터레이션 안에 릴리즈 단위의 부분 완료 제품이 구현되면 테스트를 수행한다.
        - 사용자 스토리 작성 시 함께 기재한 테스트 사항은 고객이 직접 수행
            → 해당 과정 중 생긴 오류 사항은 다음 이터레이션에 포함
        - 테스트 후 신규 요구사항 작성 혹은 요구사항 상대적 우선순위 변경 가능
        - 테스트 완료 시 다음 이터레이션 진행

    6) 소규모 릴리즈 (Small Release)
        - 소규모이기 때문에 고객 반응을 기능별로 확인 가능, 고객 요구사항에 더 유연하게 대응 가능
        - 계획된 릴리즈 기간 중 진행된 이터레이션 모두 완료 시 고객에 의한 최종 테스트 수행 후 최종 결과물을 고객에게 전달
            → 최종 완제품이 아닌 경우 다음 릴리즈 일정에 맞게 개발 계속 진행

3. XP의 주요 실천 방법 (Practice)
    1) 짝 프로그래밍 (Pair Programming)
        - 다른 사람과 함께 개발 책임을 공동으로 나눠 갖는 환경 조성
    
    2) 공동 코드 소유 (Collective Ownership)
        - 개발 코드에 대한 권한 및 책임을 공동 소유

    3) 테스트 주도 개발 (Test-Driven Development)
        - 실제 코드 작성 전 테스트 케이스 먼저 작성
        - 테스트 지속적 진행될 수 있도록 자동화된 테스팅 도구 사용 (구조, 프레임워크)
    
    4) 전체 팀 (Whole Team)
        - 개발 참여 모든 구성원(고객 포함)들이 각자 맡은 역할에 책임을 가지는 것

    5) 계속적인 통합 (Continuous Integration)
        - 모듈 단위로 나눠 개발된 코드들을 하나의 작업이 마무리 될 떄 지속적으로 통합

    6) 디자인 개선 (Design Improvement) 혹은 리팩토링 (Refactoring)
        - 프로그램 기능 변경 없이 단순화, 유연성 강화 등을 통해 시스템 재구성

    7) 소규모 릴리즈 (Small Release)
        - 릴리즈 기간을 짧게 반복하여 고객 요구 변화에 신속히 대응